type Transfer @entity(immutable: true) {
  id: Bytes!
  from: User!
  to: User!
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type User @entity {
  id: Bytes!
  balance: BigInt!
  token : Bytes!
  tokenSymbol: String!
}

type UserShare @entity {
  id: Bytes!
  shares0: BigInt!
  shares1: BigInt!
  nfts: [NFT!] @derivedFrom(field: "userShare")
}

type SharePrice @entity {
  id: Bytes!
  price0: BigInt!
  price01: BigInt
  price1: BigInt!
  price10: BigInt
  token0: Bytes!
  token0Symbol: String!
  token1: Bytes
  token1Symbol: String
}

type TransferSingle @entity(immutable: true) {
  id: Bytes!
  from: Bytes!
  to: Bytes!
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  typeId: BigInt!
}

type Deposit @entity(immutable: true) {
  id: Bytes!
  depositor: Bytes!
  amountA: BigInt!
  amountB: BigInt!
  compound: Boolean!
}

type DepositPair @entity(immutable: true) {
  id: Bytes!
  depositor: Bytes!
  amountA: BigInt!
  amountB: BigInt!
  compound: Boolean!
}

type Withdrawn @entity(immutable: true) {
  id: Bytes!
  withdrawer: Bytes!
  amountWithdrawn: BigInt!
  sharesBurned: BigInt!
}

type WithdrawnNonCompounding @entity(immutable: true) {
  id: Bytes!
  withdrawer: Bytes!
  amountWithdrawn: BigInt!
  sharesBurned: BigInt!
}

type WithdrawnPair @entity(immutable: true) {
  id: Bytes!
  withdrawer: Bytes!
  burnAmount: BigInt!
  compounding: Boolean!
  amountAWithdrawn: BigInt!
  amountBWithdrawn: BigInt!
}

type WithdrawnAll @entity(immutable: true) {
  id: Bytes!
  withdrawer: Bytes!
  amountWithdrawn: BigInt!
  sharesBurned: BigInt!
}

type VaultAdded @entity(immutable: true) {
  id: Bytes!
  vault: Bytes!
  data: Bytes
}

type MintedBurned @entity {
  id: Bytes!
  amount: BigInt!
  amount0: BigInt!
  amount1: BigInt!
}

type SharesTokenSharesCount @entity {
  id: Bytes!
  total: BigInt! 
}

type TransferNFT @entity(immutable: true) {
  id: Bytes!
  from: User!
  to: User!
  tokenId: BigInt!
}

type NFT @entity {
  id: String!
  userShare: UserShare
  cycle: Cycle!
  tokenAmountUniform: BigInt!
  token: Bytes!
}

type Cycle @entity {
  id: String!
  nfts: [NFT!] @derivedFrom(field: "cycle")
  startAt: BigInt
  totalDepositedInUsd: BigInt
  strategiesBalanceWithCompoundAndBatchDepositsInUsd: BigInt
  pricePerShare: BigInt
}
